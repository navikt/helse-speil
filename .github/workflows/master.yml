name: master

on:
  push:
    branches:
      - master
env:
  APP: speil
  TEAM: tbd
  IMAGE: docker.pkg.github.com/${{ github.repository }}/speil

jobs:
  set_version:
    runs-on: ubuntu-latest
    steps:
      - name: create docker tag
        run: echo "TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
    outputs:
      tag: ${{ env.TAG }}

  build:
    runs-on: ubuntu-latest
    needs: set_version
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Cache node deps
        id: cache-node
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Cache jest
        id: cache-jest
        uses: actions/cache@v2
        with:
          path: .jest-cache
          key: ${{ runner.os }}-jest-${{ hashFiles('jest.config.js') }}
          restore-keys: ${{ runner.os }}-jest-

      - name: set timezone
        run: export TZ=utc

      - name: install root dependencies
        run: npm ci --ignore-scripts

      - name: install package dependencies
        run: npx lerna bootstrap

      - name: build
        run: npm run build

      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: |
            cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
          # full invalidering for 책 unng책 책 ta vare p책 eldre versjoner
          restore-keys: |
            cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}

      - name: install cypress
        run: npx cypress install

      - name: run e2e-test
        run: npm run e2e-test

      - name: Archive Cypress artifacts
        uses: actions/upload-artifact@v1
        with:
          name: videos
          path: e2e-tests/cypress/videos

      - name: build docker image
        run: |
          npm prune --production
          docker build . --pull -t ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}

      - name: push docker image
        run: |
          echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
          docker push ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deployDev:
    name: Deploy to dev
    needs: [set_version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: deploy/dev.yml,deploy/alerts-dev.yml,deploy/redis.yml
          VAR: "image=${{env.IMAGE}}:${{ needs.set_version.outputs.tag }},team=${{env.TEAM}},app=${{env.APP}}"

  deployProd:
    name: Deploy to prod
    needs: [set_version, deployDev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: deploy/prod.yml,deploy/alerts-prod.yml,deploy/redis.yml
          VAR: "image=${{env.IMAGE}}:${{ needs.set_version.outputs.tag }},team=${{env.TEAM}},app=${{env.APP}}"
