/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: latest
 */
import { callCustomAxios } from '../../../../app/axios/orval-mutator';
import type { ErrorType } from '../../../../app/axios/orval-mutator';
import type { AktivSaksbehandler } from '../spesialist.schemas';

import { useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

export const getAktiveSaksbehandlere = (signal?: AbortSignal) => {
    return callCustomAxios<AktivSaksbehandler[]>({
        url: `/api/spesialist/aktive-saksbehandlere`,
        method: 'GET',
        signal,
    });
};

export const getGetAktiveSaksbehandlereQueryKey = () => {
    return [`/api/spesialist/aktive-saksbehandlere`] as const;
};

export const getGetAktiveSaksbehandlereQueryOptions = <
    TData = Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAktiveSaksbehandlere>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAktiveSaksbehandlereQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAktiveSaksbehandlere>>> = ({ signal }) =>
        getAktiveSaksbehandlere(signal);

    return { queryKey, queryFn, staleTime: Infinity, gcTime: 0, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAktiveSaksbehandlereQueryResult = NonNullable<Awaited<ReturnType<typeof getAktiveSaksbehandlere>>>;
export type GetAktiveSaksbehandlereQueryError = ErrorType<unknown>;

export function useGetAktiveSaksbehandlere<
    TData = Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAktiveSaksbehandlere>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
                    TError,
                    Awaited<ReturnType<typeof getAktiveSaksbehandlere>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAktiveSaksbehandlere<
    TData = Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAktiveSaksbehandlere>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
                    TError,
                    Awaited<ReturnType<typeof getAktiveSaksbehandlere>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAktiveSaksbehandlere<
    TData = Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAktiveSaksbehandlere>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAktiveSaksbehandlere<
    TData = Awaited<ReturnType<typeof getAktiveSaksbehandlere>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAktiveSaksbehandlere>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetAktiveSaksbehandlereQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
