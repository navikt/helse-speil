/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: latest
 */
import type { ErrorType } from '../../../../app/axios/orval-mutator';
import { callCustomAxios } from '../../../../app/axios/orval-mutator';
import type {
    ApiEndreTilkommenInntektRequest,
    ApiFjernTilkommenInntektRequest,
    ApiGjenopprettTilkommenInntektRequest,
    ApiLeggTilTilkommenInntektRequest,
    ApiLeggTilTilkommenInntektResponse,
    ApiTilkommenInntektskilde,
} from '../spesialist.schemas';

import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

export const getTilkomneInntektskilderForPerson = (aktoerId: string, signal?: AbortSignal) => {
    return callCustomAxios<ApiTilkommenInntektskilde[]>({
        url: `/api/spesialist/personer/${aktoerId}/tilkomne-inntektskilder`,
        method: 'GET',
        signal,
    });
};

export const getGetTilkomneInntektskilderForPersonQueryKey = (aktoerId?: string) => {
    return [`/api/spesialist/personer/${aktoerId}/tilkomne-inntektskilder`] as const;
};

export const getGetTilkomneInntektskilderForPersonQueryOptions = <
    TData = Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetTilkomneInntektskilderForPersonQueryKey(aktoerId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>> = ({ signal }) =>
        getTilkomneInntektskilderForPerson(aktoerId, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!aktoerId,
        staleTime: Infinity,
        gcTime: 0,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetTilkomneInntektskilderForPersonQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>
>;
export type GetTilkomneInntektskilderForPersonQueryError = ErrorType<unknown>;

export function useGetTilkomneInntektskilderForPerson<
    TData = Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>,
                    TError,
                    Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTilkomneInntektskilderForPerson<
    TData = Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>,
                    TError,
                    Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTilkomneInntektskilderForPerson<
    TData = Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetTilkomneInntektskilderForPerson<
    TData = Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTilkomneInntektskilderForPerson>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetTilkomneInntektskilderForPersonQueryOptions(aktoerId, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postTilkomneInntekter = (
    apiLeggTilTilkommenInntektRequest?: ApiLeggTilTilkommenInntektRequest,
    signal?: AbortSignal,
) => {
    return callCustomAxios<ApiLeggTilTilkommenInntektResponse>({
        url: `/api/spesialist/tilkomne-inntekter`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: apiLeggTilTilkommenInntektRequest,
        signal,
    });
};

export const getPostTilkomneInntekterMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postTilkomneInntekter>>,
        TError,
        { data: ApiLeggTilTilkommenInntektRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postTilkomneInntekter>>,
    TError,
    { data: ApiLeggTilTilkommenInntektRequest },
    TContext
> => {
    const mutationKey = ['postTilkomneInntekter'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postTilkomneInntekter>>,
        { data: ApiLeggTilTilkommenInntektRequest }
    > = (props) => {
        const { data } = props ?? {};

        return postTilkomneInntekter(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostTilkomneInntekterMutationResult = NonNullable<Awaited<ReturnType<typeof postTilkomneInntekter>>>;
export type PostTilkomneInntekterMutationBody = ApiLeggTilTilkommenInntektRequest;
export type PostTilkomneInntekterMutationError = ErrorType<unknown>;

export const usePostTilkomneInntekter = <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof postTilkomneInntekter>>,
            TError,
            { data: ApiLeggTilTilkommenInntektRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof postTilkomneInntekter>>,
    TError,
    { data: ApiLeggTilTilkommenInntektRequest },
    TContext
> => {
    const mutationOptions = getPostTilkomneInntekterMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};
export const postTilkommenInntektEndre = (
    tilkommenInntektId: string,
    apiEndreTilkommenInntektRequest?: ApiEndreTilkommenInntektRequest,
    signal?: AbortSignal,
) => {
    return callCustomAxios<boolean>({
        url: `/api/spesialist/tilkomne-inntekter/${tilkommenInntektId}/endre`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: apiEndreTilkommenInntektRequest,
        signal,
    });
};

export const getPostTilkommenInntektEndreMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postTilkommenInntektEndre>>,
        TError,
        { tilkommenInntektId: string; data: ApiEndreTilkommenInntektRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postTilkommenInntektEndre>>,
    TError,
    { tilkommenInntektId: string; data: ApiEndreTilkommenInntektRequest },
    TContext
> => {
    const mutationKey = ['postTilkommenInntektEndre'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postTilkommenInntektEndre>>,
        { tilkommenInntektId: string; data: ApiEndreTilkommenInntektRequest }
    > = (props) => {
        const { tilkommenInntektId, data } = props ?? {};

        return postTilkommenInntektEndre(tilkommenInntektId, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostTilkommenInntektEndreMutationResult = NonNullable<
    Awaited<ReturnType<typeof postTilkommenInntektEndre>>
>;
export type PostTilkommenInntektEndreMutationBody = ApiEndreTilkommenInntektRequest;
export type PostTilkommenInntektEndreMutationError = ErrorType<unknown>;

export const usePostTilkommenInntektEndre = <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof postTilkommenInntektEndre>>,
            TError,
            { tilkommenInntektId: string; data: ApiEndreTilkommenInntektRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof postTilkommenInntektEndre>>,
    TError,
    { tilkommenInntektId: string; data: ApiEndreTilkommenInntektRequest },
    TContext
> => {
    const mutationOptions = getPostTilkommenInntektEndreMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};
export const postTilkommenInntektFjern = (
    tilkommenInntektId: string,
    apiFjernTilkommenInntektRequest?: ApiFjernTilkommenInntektRequest,
    signal?: AbortSignal,
) => {
    return callCustomAxios<boolean>({
        url: `/api/spesialist/tilkomne-inntekter/${tilkommenInntektId}/fjern`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: apiFjernTilkommenInntektRequest,
        signal,
    });
};

export const getPostTilkommenInntektFjernMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postTilkommenInntektFjern>>,
        TError,
        { tilkommenInntektId: string; data: ApiFjernTilkommenInntektRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postTilkommenInntektFjern>>,
    TError,
    { tilkommenInntektId: string; data: ApiFjernTilkommenInntektRequest },
    TContext
> => {
    const mutationKey = ['postTilkommenInntektFjern'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postTilkommenInntektFjern>>,
        { tilkommenInntektId: string; data: ApiFjernTilkommenInntektRequest }
    > = (props) => {
        const { tilkommenInntektId, data } = props ?? {};

        return postTilkommenInntektFjern(tilkommenInntektId, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostTilkommenInntektFjernMutationResult = NonNullable<
    Awaited<ReturnType<typeof postTilkommenInntektFjern>>
>;
export type PostTilkommenInntektFjernMutationBody = ApiFjernTilkommenInntektRequest;
export type PostTilkommenInntektFjernMutationError = ErrorType<unknown>;

export const usePostTilkommenInntektFjern = <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof postTilkommenInntektFjern>>,
            TError,
            { tilkommenInntektId: string; data: ApiFjernTilkommenInntektRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof postTilkommenInntektFjern>>,
    TError,
    { tilkommenInntektId: string; data: ApiFjernTilkommenInntektRequest },
    TContext
> => {
    const mutationOptions = getPostTilkommenInntektFjernMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};
export const postTilkommenInntektGjenopprett = (
    tilkommenInntektId: string,
    apiGjenopprettTilkommenInntektRequest?: ApiGjenopprettTilkommenInntektRequest,
    signal?: AbortSignal,
) => {
    return callCustomAxios<boolean>({
        url: `/api/spesialist/tilkomne-inntekter/${tilkommenInntektId}/gjenopprett`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: apiGjenopprettTilkommenInntektRequest,
        signal,
    });
};

export const getPostTilkommenInntektGjenopprettMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postTilkommenInntektGjenopprett>>,
        TError,
        { tilkommenInntektId: string; data: ApiGjenopprettTilkommenInntektRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postTilkommenInntektGjenopprett>>,
    TError,
    { tilkommenInntektId: string; data: ApiGjenopprettTilkommenInntektRequest },
    TContext
> => {
    const mutationKey = ['postTilkommenInntektGjenopprett'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postTilkommenInntektGjenopprett>>,
        { tilkommenInntektId: string; data: ApiGjenopprettTilkommenInntektRequest }
    > = (props) => {
        const { tilkommenInntektId, data } = props ?? {};

        return postTilkommenInntektGjenopprett(tilkommenInntektId, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostTilkommenInntektGjenopprettMutationResult = NonNullable<
    Awaited<ReturnType<typeof postTilkommenInntektGjenopprett>>
>;
export type PostTilkommenInntektGjenopprettMutationBody = ApiGjenopprettTilkommenInntektRequest;
export type PostTilkommenInntektGjenopprettMutationError = ErrorType<unknown>;

export const usePostTilkommenInntektGjenopprett = <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof postTilkommenInntektGjenopprett>>,
            TError,
            { tilkommenInntektId: string; data: ApiGjenopprettTilkommenInntektRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof postTilkommenInntektGjenopprett>>,
    TError,
    { tilkommenInntektId: string; data: ApiGjenopprettTilkommenInntektRequest },
    TContext
> => {
    const mutationOptions = getPostTilkommenInntektGjenopprettMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};
