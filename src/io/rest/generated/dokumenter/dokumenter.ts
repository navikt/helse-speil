/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: latest
 */
import type { ErrorType } from '../../../../app/axios/orval-mutator';
import { callCustomAxios } from '../../../../app/axios/orval-mutator';
import type { ApiDokumentInntektsmelding, ApiSoknad } from '../spesialist.schemas';

import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';

export const getSoknad = (aktoerId: string, dokumentId: string, signal?: AbortSignal) => {
    return callCustomAxios<ApiSoknad>({
        url: `/api/spesialist/personer/${aktoerId}/dokumenter/${dokumentId}/soknad`,
        method: 'GET',
        signal,
    });
};

export const getGetSoknadQueryKey = (aktoerId?: string, dokumentId?: string) => {
    return [`/api/spesialist/personer/${aktoerId}/dokumenter/${dokumentId}/soknad`] as const;
};

export const getGetSoknadQueryOptions = <TData = Awaited<ReturnType<typeof getSoknad>>, TError = ErrorType<unknown>>(
    aktoerId: string,
    dokumentId: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSoknad>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetSoknadQueryKey(aktoerId, dokumentId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSoknad>>> = ({ signal }) =>
        getSoknad(aktoerId, dokumentId, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(aktoerId && dokumentId),
        staleTime: Infinity,
        gcTime: 0,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getSoknad>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetSoknadQueryResult = NonNullable<Awaited<ReturnType<typeof getSoknad>>>;
export type GetSoknadQueryError = ErrorType<unknown>;

export function useGetSoknad<TData = Awaited<ReturnType<typeof getSoknad>>, TError = ErrorType<unknown>>(
    aktoerId: string,
    dokumentId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSoknad>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getSoknad>>,
                    TError,
                    Awaited<ReturnType<typeof getSoknad>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSoknad<TData = Awaited<ReturnType<typeof getSoknad>>, TError = ErrorType<unknown>>(
    aktoerId: string,
    dokumentId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSoknad>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getSoknad>>,
                    TError,
                    Awaited<ReturnType<typeof getSoknad>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSoknad<TData = Awaited<ReturnType<typeof getSoknad>>, TError = ErrorType<unknown>>(
    aktoerId: string,
    dokumentId: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSoknad>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSoknad<TData = Awaited<ReturnType<typeof getSoknad>>, TError = ErrorType<unknown>>(
    aktoerId: string,
    dokumentId: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSoknad>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetSoknadQueryOptions(aktoerId, dokumentId, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getInntektsmelding = (aktoerId: string, dokumentId: string, signal?: AbortSignal) => {
    return callCustomAxios<ApiDokumentInntektsmelding>({
        url: `/api/spesialist/personer/${aktoerId}/dokumenter/${dokumentId}/inntektsmelding`,
        method: 'GET',
        signal,
    });
};

export const getGetInntektsmeldingQueryKey = (aktoerId?: string, dokumentId?: string) => {
    return [`/api/spesialist/personer/${aktoerId}/dokumenter/${dokumentId}/inntektsmelding`] as const;
};

export const getGetInntektsmeldingQueryOptions = <
    TData = Awaited<ReturnType<typeof getInntektsmelding>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    dokumentId: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInntektsmelding>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetInntektsmeldingQueryKey(aktoerId, dokumentId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInntektsmelding>>> = ({ signal }) =>
        getInntektsmelding(aktoerId, dokumentId, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(aktoerId && dokumentId),
        staleTime: Infinity,
        gcTime: 0,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getInntektsmelding>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetInntektsmeldingQueryResult = NonNullable<Awaited<ReturnType<typeof getInntektsmelding>>>;
export type GetInntektsmeldingQueryError = ErrorType<unknown>;

export function useGetInntektsmelding<
    TData = Awaited<ReturnType<typeof getInntektsmelding>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    dokumentId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInntektsmelding>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getInntektsmelding>>,
                    TError,
                    Awaited<ReturnType<typeof getInntektsmelding>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInntektsmelding<
    TData = Awaited<ReturnType<typeof getInntektsmelding>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    dokumentId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInntektsmelding>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getInntektsmelding>>,
                    TError,
                    Awaited<ReturnType<typeof getInntektsmelding>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInntektsmelding<
    TData = Awaited<ReturnType<typeof getInntektsmelding>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    dokumentId: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInntektsmelding>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetInntektsmelding<
    TData = Awaited<ReturnType<typeof getInntektsmelding>>,
    TError = ErrorType<unknown>,
>(
    aktoerId: string,
    dokumentId: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInntektsmelding>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetInntektsmeldingQueryOptions(aktoerId, dokumentId, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
